<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sinosafe.xszc.plan.vo.SalePlanDept" >
	<resultMap id="BaseResultMap" type="java.util.HashMap">
		<id column="DEPT_PLAN_ID" property="deptPlanId" javaType="java.lang.String" jdbcType="VARCHAR" />
		<result column="UPDATED_USER" property="updatedUser" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="CREATED_USER" property="createdUser" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="DEPT_RISK_TYPE" property="deptRiskType" jdbcType="CHAR" javaType="java.lang.String" />
 		<result column="IPORTANT_PREMIUM" property="iportantPremium" jdbcType="DOUBLE" javaType="java.lang.Double" />
 		<result column="UPDATED_DATE" property="updatedDate" jdbcType="DATE" javaType="java.sql.Timestamp" />
  		<result column="SALE_PLAN_ID" property="salePlanId" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="FINANCE_PREMINUM" property="financePreminum" jdbcType="DOUBLE" javaType="java.lang.Double" />
 		<result column="NORMAL_PREMIUM" property="normalPremium" jdbcType="DOUBLE" javaType="java.lang.Double" />
 		<result column="CREATED_DATE" property="createdDate" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="CONTENT" property="content" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="DESC" property="desc" jdbcType="VARCHAR" javaType="java.lang.String" />
 	</resultMap>
	
	<resultMap id="BaseResultVo" type="com.sinosafe.xszc.plan.vo.SalePlanDept">
		<id column="DEPT_PLAN_ID" property="deptPlanId" javaType="java.lang.String" jdbcType="VARCHAR" />
		<result column="UPDATED_USER" property="updatedUser" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="CREATED_USER" property="createdUser" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="DEPT_RISK_TYPE" property="deptRiskType" jdbcType="CHAR" javaType="java.lang.String" />
 		<result column="IPORTANT_PREMIUM" property="iportantPremium" jdbcType="DOUBLE" javaType="java.lang.Double" />
 		<result column="UPDATED_DATE" property="updatedDate" jdbcType="DATE" javaType="java.sql.Timestamp" />
  		<result column="SALE_PLAN_ID" property="salePlanId" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="FINANCE_PREMINUM" property="financePreminum" jdbcType="DOUBLE" javaType="java.lang.Double" />
 		<result column="NORMAL_PREMIUM" property="normalPremium" jdbcType="DOUBLE" javaType="java.lang.Double" />
 		<result column="CREATED_DATE" property="createdDate" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="CONTENT" property="content" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="DESC" property="desc" jdbcType="VARCHAR" javaType="java.lang.String" />
 		<result column="STATUS" property="status" jdbcType="VARCHAR" javaType="java.lang.String" />
 	</resultMap>

	<!-- 查询数据列Sql不转换成对应的Java命名 -->
	<sql id="Base_Column_List" >
		UPDATED_USER,
		CREATED_USER,
		DEPT_RISK_TYPE,
		IPORTANT_PREMIUM,
		UPDATED_DATE,
		DEPT_PLAN_ID,
		SALE_PLAN_ID,
		FINANCE_PREMINUM,
		NORMAL_PREMIUM,
		CREATED_DATE,
		"CONTENT",
		"DESC",
		STATUS
	</sql>
	
	<!-- 查询数据列Sql换成对应的Java命名 -->
	<sql id="Base_Column_List_JavaName" >
		UPDATED_USER as "updatedUser",
		CREATED_USER as "createdUser",
		DEPT_RISK_TYPE as "deptRiskType",
		IPORTANT_PREMIUM as "iportantPremium",
		UPDATED_DATE as "updatedDate",
		DEPT_PLAN_ID as "deptPlanId",
		SALE_PLAN_ID as "salePlanId",
		FINANCE_PREMINUM as "financePreminum",
		NORMAL_PREMIUM as "normalPremium",
		CREATED_DATE as "createdDate",
		CONTENT as "content",
		DESC as "desc",
		STATUS as "status"
	</sql>
	
	<!-- 写入操作的SQL -->
	<sql id="Insert_Base_values">
		#{updatedUser,jdbcType=VARCHAR},
 		#{createdUser,jdbcType=VARCHAR},
 		#{deptRiskType,jdbcType=CHAR},
 		#{iportantPremium,jdbcType=DOUBLE},
 		#{updatedDate,jdbcType=DATE},
 		#{deptPlanId,jdbcType=VARCHAR},
 		#{salePlanId,jdbcType=VARCHAR},
 		#{financePreminum,jdbcType=DOUBLE},
 		#{normalPremium,jdbcType=DOUBLE},
 		sysdate <!--#{createdDate,jdbcType=DATE} -->,
 		#{content,jdbcType=VARCHAR},
 		#{desc,jdbcType=VARCHAR},
 		#{status,jdbcType=VARCHAR}
 	</sql>
	
	<!-- 查询条件的sql -->
	<sql id="Base_Where_Sql">
		<where>
		<if test="updatedUser != null">
			and UPDATED_USER = #{updatedUser,jdbcType=VARCHAR}
		</if>
		<if test="createdUser != null">
			and CREATED_USER = #{createdUser,jdbcType=VARCHAR}
		</if>
		<if test="deptRiskType != null">
			and DEPT_RISK_TYPE = #{deptRiskType,jdbcType=CHAR}
		</if>
		<if test="iportantPremium != null">
			and IPORTANT_PREMIUM = #{iportantPremium,jdbcType=DOUBLE}
		</if>
		<if test="updatedDate != null">
			and UPDATED_DATE = #{updatedDate,jdbcType=DATE}
		</if>
		<if test="deptPlanId != null">
			and DEPT_PLAN_ID = #{deptPlanId,jdbcType=VARCHAR}
		</if>
		<if test="salePlanId != null">
			and SALE_PLAN_ID = #{salePlanId,jdbcType=VARCHAR}
		</if>
		<if test="financePreminum != null">
			and FINANCE_PREMINUM = #{financePreminum,jdbcType=DOUBLE}
		</if>
		<if test="normalPremium != null">
			and NORMAL_PREMIUM = #{normalPremium,jdbcType=DOUBLE}
		</if>
		<if test="createdDate != null">
			and CREATED_DATE = #{createdDate,jdbcType=DATE}
		</if>
		<if test="content != null">
			and CONTENT = #{content,jdbcType=VARCHAR}
		</if>
		<if test="desc != null">
			and DESC = #{desc,jdbcType=VARCHAR}
		</if>
		<if test="status != null">
			and STATUS = #{status,jdbcType=VARCHAR}
		</if>
		</where>
	</sql>
	
	<!-- 
		insert操作给定的参数是java.util.Map<String,Object>类型的对象，
		与<sql id="Insert_Base_values">中配置的列一致
	-->
	<insert id="insertVo" parameterType="com.sinosafe.xszc.plan.vo.SalePlanDept" >
    insert into SALE_PLAN_DEPT (
		<include refid="Base_Column_List" />
    )
	values (
		<include refid="Insert_Base_values" />
    )
	</insert>
	
	<!-- 
		insert操作给定的参数是java.util.Map<String,Object>类型的对象，
		与<sql id="Insert_Base_values">中配置的列一致
	-->
	<insert id="insert" parameterType="map" >
    insert into SALE_PLAN_DEPT (
		<include refid="Base_Column_List" />
    )
	values (
		<include refid="Insert_Base_values" />
    )
	</insert>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from SALE_PLAN_DEPT
    where DEPT_PLAN_ID = #{deptPlanId,jdbcType=VARCHAR}
	</delete>
<!-- 
	<delete id="deleteByDataKey" parameterType="long">
    delete from SALE_PLAN_DEPT
    where PK_SERIAL = #{data}
	</delete>
 -->
	<update id="updateByPrimaryKeySelective" parameterType="map" >
	update SALE_PLAN_DEPT
	<set>
	<if test="updatedUser != null">
		UPDATED_USER = #{updatedUser,jdbcType=VARCHAR},
	</if>
  	<if test="createdUser != null">
		CREATED_USER = #{createdUser,jdbcType=VARCHAR},
	</if>
  	<if test="deptRiskType != null">
		DEPT_RISK_TYPE = #{deptRiskType,jdbcType=CHAR},
	</if>
  	<if test="iportantPremium != null">
		IPORTANT_PREMIUM = #{iportantPremium,jdbcType=DOUBLE},
	</if>
  	<if test="updatedDate != null">
		UPDATED_DATE = #{updatedDate,jdbcType=DATE},
	</if>
   	<if test="salePlanId != null">
		SALE_PLAN_ID = #{salePlanId,jdbcType=VARCHAR},
	</if>
  	<if test="financePreminum != null">
		FINANCE_PREMINUM = #{financePreminum,jdbcType=DOUBLE},
	</if>
  	<if test="normalPremium != null">
		NORMAL_PREMIUM = #{normalPremium,jdbcType=DOUBLE},
	</if>
  	<if test="createdDate != null">
		CREATED_DATE = #{createdDate,jdbcType=DATE},
	</if>
  	<if test="content != null">
		CONTENT = #{content,jdbcType=VARCHAR},
	</if>
  	<if test="desc != null">
		DESC = #{desc,jdbcType=VARCHAR}
	</if>
  	<if test="deptCode != null">
		STATUS = #{status,jdbcType=VARCHAR},
	</if>
  	</set>
	where DEPT_PLAN_ID = #{deptPlanId,jdbcType=VARCHAR}
	</update>
	
	<update id="updateByPrimaryKey" parameterType="map" >
		update SALE_PLAN_DEPT
		set 
			UPDATED_USER = #{updatedUser,jdbcType=VARCHAR},
  			CREATED_USER = #{createdUser,jdbcType=VARCHAR},
  			DEPT_RISK_TYPE = #{deptRiskType,jdbcType=CHAR},
  			IPORTANT_PREMIUM = #{iportantPremium,jdbcType=DOUBLE},
  			UPDATED_DATE = #{updatedDate,jdbcType=DATE},
   			SALE_PLAN_ID = #{salePlanId,jdbcType=VARCHAR},
  			FINANCE_PREMINUM = #{financePreminum,jdbcType=DOUBLE},
  			NORMAL_PREMIUM = #{normalPremium,jdbcType=DOUBLE},
  			CREATED_DATE = #{createdDate,jdbcType=DATE},
  			CONTENT = #{content,jdbcType=VARCHAR},
  			DESC = #{desc,jdbcType=VARCHAR}
  		where DEPT_PLAN_ID = #{deptPlanId,jdbcType=VARCHAR}
	</update>

	<update id="updateByPrimaryKeySelectiveVo" parameterType="com.sinosafe.xszc.plan.vo.SalePlanDept" >
	update SALE_PLAN_DEPT
	<set>
	<if test="updatedUser != null">
		UPDATED_USER = #{updatedUser,jdbcType=VARCHAR},
	</if>
  	<if test="createdUser != null">
		CREATED_USER = #{createdUser,jdbcType=VARCHAR},
	</if>
  	<if test="deptRiskType != null">
		DEPT_RISK_TYPE = #{deptRiskType,jdbcType=CHAR},
	</if>
  	<if test="iportantPremium != null">
		IPORTANT_PREMIUM = #{iportantPremium,jdbcType=DOUBLE},
	</if>
  	<if test="updatedDate != null">
		UPDATED_DATE = #{updatedDate,jdbcType=DATE},
	</if>
   	<if test="salePlanId != null">
		SALE_PLAN_ID = #{salePlanId,jdbcType=VARCHAR},
	</if>
  	<if test="financePreminum != null">
		FINANCE_PREMINUM = #{financePreminum,jdbcType=DOUBLE},
	</if>
  	<if test="normalPremium != null">
		NORMAL_PREMIUM = #{normalPremium,jdbcType=DOUBLE},
	</if>
  	<if test="createdDate != null">
		CREATED_DATE = #{createdDate,jdbcType=DATE},
	</if>
  	<if test="content != null">
		CONTENT = #{content,jdbcType=VARCHAR},
	</if>
  	<if test="desc != null">
		DESC = #{desc,jdbcType=VARCHAR}
	</if>
  	<if test="deptCode != null">
		STATUS = #{status,jdbcType=VARCHAR},
	</if>
  	</set>
	where DEPT_PLAN_ID = #{deptPlanId,jdbcType=VARCHAR}
	</update>
	
	<update id="updateByPrimaryKeyVo" parameterType="com.sinosafe.xszc.plan.vo.SalePlanDept" >
		update SALE_PLAN_DEPT
		set 
			UPDATED_USER = #{updatedUser,jdbcType=VARCHAR},
  			CREATED_USER = #{createdUser,jdbcType=VARCHAR},
  			DEPT_RISK_TYPE = #{deptRiskType,jdbcType=CHAR},
  			IPORTANT_PREMIUM = #{iportantPremium,jdbcType=DOUBLE},
  			UPDATED_DATE = #{updatedDate,jdbcType=DATE},
   			SALE_PLAN_ID = #{salePlanId,jdbcType=VARCHAR},
  			FINANCE_PREMINUM = #{financePreminum,jdbcType=DOUBLE},
  			NORMAL_PREMIUM = #{normalPremium,jdbcType=DOUBLE},
  			CREATED_DATE = #{createdDate,jdbcType=DATE},
  			CONTENT = #{content,jdbcType=VARCHAR},
  			DESC = #{desc,jdbcType=VARCHAR}
  		where DEPT_PLAN_ID = #{deptPlanId,jdbcType=VARCHAR}
	</update>

	<!-- 根据Id查询一条数据 -->
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select <include refid="Base_Column_List" />
	from SALE_PLAN_DEPT
	where DEPT_PLAN_ID = #{salePlanId,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据Id查询一条数据 -->
	<select id="selectByPrimaryKeyVo" resultMap="BaseResultVo" parameterType="java.lang.String" >
    select <include refid="Base_Column_List" />
	from SALE_PLAN_DEPT
	where DEPT_PLAN_ID = #{deptPlanId,jdbcType=VARCHAR}
	</select>
	

	<!-- 条件查询总数据量 -->
	<select id="queryCount" parameterType="map" resultType="long">
	select count(1)
	from SALE_PLAN_DEPT <include refid="Base_Where_Sql" />
	</select>
	
	<!-- 条件查询总数据量 -->
	<select id="queryCountVo" parameterType="com.sinosafe.xszc.plan.vo.SalePlanDept" resultType="long">
	select count(1)
	from SALE_PLAN_DEPT <include refid="Base_Where_Sql" />
	</select>

	<!-- 单独条件分页查询语句,注意下面语句中的endpoint和startpoint这两个名称不可修改，否则将导致sql错误 -->
	<select id="queryListPage" parameterType="map" resultMap="BaseResultMap">
	select * from (
		select a.*,rownum rn from (
		select 
		<include refid="Base_Column_List"/>
		from SALE_PLAN_DEPT
		<include refid="Base_Where_Sql"/>
		) a where rownum &lt;= #{endpoint}
	) where rn &gt;= #{startpoint}
	</select>
	
	<!-- 单独条件分页查询语句,注意下面语句中的endpoint和startpoint这两个名称不可修改，否则将导致sql错误 -->
	<select id="queryListPageInfoDept" parameterType="map" resultMap="BaseResultMap">
	select * from (
		select a.*,rownum rn from (
		select info.sale_plan_id as "salePlanId",
		       info.dept_code as "deptCde",
		       info.year as "year",
		       info.quarter as "quarter",
		       info.dept_premium  as "deptPremium"
		  from sale_plan_info info
		 where info.plan_type = '1'
		) a where rownum &lt;= #{endpoint}
	) where rn &gt;= #{startpoint}
	</select>
	
	<!-- 单独条件分页查询语句,注意下面语句中的endpoint和startpoint这两个名称不可修改，否则将导致sql错误 -->
	<select id="queryListPageVo" parameterType="map" resultMap="BaseResultVo">
	select * from (
		select a.*,rownum rn from (
		select 
		<include refid="Base_Column_List"/>
		from SALE_PLAN_DEPT
		<include refid="Base_Where_Sql"/>
		) a where rownum &lt;= #{endpoint}
	) where rn &gt;= #{startpoint}
	</select>
	
	<!-- 条件查询 -->
	<select id="query" parameterType="map" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List"/>
		from SALE_PLAN_DEPT
		<include refid="Base_Where_Sql"/>
	</select>
	
	<!-- 条件查询 -->
	<select id="queryVo" parameterType="map" resultMap="BaseResultVo">
		select 
		<include refid="Base_Column_List"/>
		from SALE_PLAN_DEPT
		<include refid="Base_Where_Sql"/>
	</select>
	
	<!-- 综合条件分页查询语句,注意下面语句中的endpoint和startpoint这两个名称不可修改，否则将导致sql错误 -->
	<select id="queryPage" parameterType="map" resultMap="BaseResultMap">
	<choose>
		<when test="endpoint!=null and endpoint != '' and startpoint != null and startpoint != ''">
		select * from (
			select a.*,rownum rn from (
				select 
				<include refid="Base_Column_List"/>
				from SALE_PLAN_DEPT
				<include refid="Base_Where_Sql"/>
			) a where rownum &lt;= #{endpoint}
		) where rn &gt;= #{startpoint}
		</when>
		<otherwise>
		<!-- 这里的"count"重命名不可修改，否则会出现异常 -->
		select count(1) "count" from SALE_PLAN_DEPT <include refid="Base_Where_Sql" />
		</otherwise>
	</choose>
	
	select * from (
		select a.*,rownum rn from (
		select 
		<include refid="Base_Column_List"/>
		from SALE_PLAN_DEPT
		<include refid="Base_Where_Sql"/>
		) a where rownum &lt;= #{endpoint}
	) where rn &gt;= #{startpoint}
	</select>
	
	<!-- 综合条件分页查询语句,注意下面语句中的endpoint和startpoint这两个名称不可修改，否则将导致sql错误 -->
	<select id="queryPageVo" parameterType="map" resultMap="BaseResultVo">
	<choose>
		<when test="endpoint!=null and endpoint != '' and startpoint != null and startpoint != ''">
		select * from (
			select a.*,rownum rn from (
				select 
				<include refid="Base_Column_List"/>
				from SALE_PLAN_DEPT
				<include refid="Base_Where_Sql"/>
			) a where rownum &lt;= #{endpoint}
		) where rn &gt;= #{startpoint}
		</when>
		<otherwise>
		<!-- 这里的"count"重命名不可修改，否则会出现异常 -->
		select count(1) "count" from SALE_PLAN_DEPT <include refid="Base_Where_Sql" />
		</otherwise>
	</choose>
	
	select * from (
		select a.*,rownum rn from (
		select 
		<include refid="Base_Column_List"/>
		from SALE_PLAN_DEPT
		<include refid="Base_Where_Sql"/>
		) a where rownum &lt;= #{endpoint}
	) where rn &gt;= #{startpoint}
	</select>
	
</mapper>
